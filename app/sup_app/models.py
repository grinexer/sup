from django.db import models
class Role(models.Model):
    role_id=models.BigAutoField(primary_key=True)
    can_see_organization_calendar=models.BooleanField(default=True)
    can_create_task_from_lower_to_higher=models.BooleanField(default=False)
    can_create_task_for_not_connectet_posts=models.BooleanField(default=False)
    can_change_user_rights=models.BooleanField(default=False)
    can_create_related_posts=models.BooleanField(default=False)
    can_change_related_posts=models.BooleanField(default=False)
    can_delete_related_posts=models.BooleanField(default=False)
    can_create_any_posts=models.BooleanField(default=False)
    can_change_any_posts=models.BooleanField(default=False)
    can_delete_any_posts=models.BooleanField(default=False)
    can_invite_user=models.BooleanField(default=False)
    can_delete_user=models.BooleanField(default=False)
    can_see_other_posts_tasks=models.BooleanField(default=False)
    can_change_other_posts_tasks=models.BooleanField(default=False)
    can_delete_other_posts_tasks=models.BooleanField(default=False)
    have_personal_cal=models.BooleanField(default=True)
    can_create_multi_person_cal_event=models.BooleanField(default=True)
    can_see_knowledge_base=models.BooleanField(default=True)
    can_see_organizations_chek_lists=models.BooleanField(default=True)
    can_change_organizations_chek_lists=models.BooleanField(default=False)
    can_add_organizations_chek_lists=models.BooleanField(default=False)
    can_delete_organizations_chek_lists=models.BooleanField(default=False)
    can_see_sample_documents=models.BooleanField(default=True)
    can_change_sample_documents=models.BooleanField(default=False)
    can_add_sample_documents=models.BooleanField(default=False)
    can_delete_sample_documents=models.BooleanField(default=False)
    can_see_reports=models.BooleanField(default=False)
class Users(models.Model):
    u_id=models.BigAutoField(primary_key=True)
    u_email = models.CharField(max_length=50,unique=True)
    u_pass = models.CharField(max_length=200)
    u_second_name=models.CharField(max_length=30)
    u_name=models.CharField(max_length=30)
    u_patronymic=models.CharField(max_length=30,null=True)
    u_phone_number=models.CharField(max_length=20,null=True)
    u_status=models.CharField(max_length=15, null=True)
    u_profile_photo=models.TextField(null=True)
    u_telegram_id=models.CharField(max_length=40,null=True)
    u_org_id=models.ForeignKey(to="Organizations",null=True,on_delete=models.SET_NULL)
    u_role_id=models.ForeignKey(to=Role,on_delete=models.SET_NULL,null=True)
class Comments(models.Model):
    c_id=models.BigAutoField(primary_key=True)
    c_send_time=models.DateTimeField()
    c_text=models.TextField(null=True)
    c_files=models.TextField(null=True)
    c_sended_by_user=models.ForeignKey('Users',on_delete=models.CASCADE)
class Cheklist(models.Model):
    ch_id=models.BigAutoField(primary_key=True)
    #используется в случчае если это оnдельный чеклист вне задачи
    ch_for_task=models.BooleanField(default=True)
    ch_name=models.CharField(max_length=255,null=True)
class Cheklist_component(models.Model):
    c_c_id=models.BigAutoField(primary_key=True)
    c_c_ch_id=models.ForeignKey(to=Cheklist,on_delete=models.CASCADE)
    c_c_text=models.TextField()
    c_c_closed=models.BooleanField(default=False)
class Tasks(models.Model):
    t_id=models.BigAutoField(primary_key=True)
    t_name=models.CharField(max_length=30)
    t_full_text=models.TextField(null=True)
    t_file=models.TextField(null=True)
    t_start=models.DateField()
    t_end=models.DateField(null=True)
    t_fact_end_time=models.DateTimeField(null=True)
    t_creator_post_id=models.ForeignKey('Posts',on_delete=models.CASCADE)
    #false- если любой из post; true -если должны закрыть все
    t_close_by_all=models.BooleanField(default=False)
    #true- если завершена; false - если не завершена
    t_status=models.BooleanField(default=False)
    #o-обычная;s-срочная;d-ДСП(прямое поручение);i-информационная(ознакомительная)
    t_type=models.CharField(max_length=2,default='o')
    t_comments=models.ManyToManyField(to=Comments,null=True)
    #текстовые значения 
    t_chek_list=models.ForeignKey(to=Cheklist,null=True)
class Posts(models.Model):
    p_id=models.BigAutoField(primary_key=True)
    p_name=models.CharField(max_length=100)
    p_parent_id=models.ForeignKey('Posts',on_delete=models.SET_NULL,null=True)
    p_user=models.ManyToManyField(to=Users,null=True)
    p_aktiv_tasks=models.ManyToManyField(to=Tasks,null=True)
    p_past_tasks=models.ManyToManyField(to=Tasks,null=True)
    p_watching_tasks=models.ManyToManyField(to=Tasks,null=True)
    p_role_id=models.ForeignKey(to=Role,on_delete=models.SET_NULL,null=True)
    p_org_id=models.ForeignKey(to='Organizations',on_delete=models.CASCADE)
class Organizations(models.Model):
    org_id=models.BigAutoField(primary_key=True)
    org_name=models.CharField(max_length=100)
    org_ovner_user=models.OneToOneField(Users,on_delete=models.SET_NULL,null=True)
    org_api_key=models.CharField(max_length=100,unique=True)
    task_from_lower_to_higher=models.BooleanField(default=True)
    task_for_not_connectet_posts=models.BooleanField(default=True)
class Calendar_events(models.Model):
    c_e_id=models.BigAutoField(primary_key=True)
    c_e_creator=models.ForeignKey(to=Users,on_delete=models.CASCADE)
    c_e_name=models.CharField(max_length=200)
    c_e_date_start=models.DateField()
    c_e_time_start=models.TimeField(null=True)
    c_e_date_end=models.DateField(null=True)
    c_e_time_end=models.TimeField(null=True)
    c_e_place=models.CharField(max_length=100,null=True)
    #количество минут для уведомления 60|30|10 или не уведомлять
    c_e_notifik=models.IntegerField(null=True)
    #true для всех в организации false= для определённого круга
    c_e_for_all=models.BooleanField(default=False)
    #true- для приглашенных пользователей; false-для приглашенных должностей
    c_e_for_users=models.BooleanField(default=False)
    c_e_invited_users=models.ManyToManyField(to=Users,null=True)
    c_e_invited_posts=models.ManyToManyField(to=Posts,null=True)
    c_e_for_org=models.ForeignKey('Organizations',on_delete=models.CASCADE)
class Logs(models.Model):
    l_u_id=models.ForeignKey(to=Users)
    l_did=models.TextField(null=False)
    l_at=models.DateTimeField(null=False)
class Invite_keys(models.Model):
    invite_key=models.BigAutoField(primary_key=True)
    for_org=models.ForeignKey(to="Organizations",null=True,on_delete=models.SET_NULL)
    for_post=models.ForeignKey(to="Posts",null=True,on_delete=models.SET_NULL)
    invite_used=models.BooleanField(default=False)